#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.19
#  in conjunction with Tcl version 8.6
#    Apr 09, 2019 03:17:10 PM EEST  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import bngl_creator_v02_support

import os
from tkinter import (filedialog,
                     messagebox,
                     END)

from sys_cache.cache import read_s_loc, write_s_loc


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    bngl_creator_v02_support.init(root, top)
    root.mainloop()


w = None


def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    bngl_creator_v02_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_Toplevel1():
    global w
    w.destroy()
    w = None


class Toplevel1:
    global recog, created_set, created_set_n, active_item_n, messages, source_file_path, sequence, amount

    def __init__(self, top=None):
        begin, end, active_item_n, messages, source_file_path, sequence, amount = 'begin species', \
                                                                                  'end species', \
                                                                                  tk.IntVar(), \
                                                                                  tk.StringVar(), \
                                                                                  tk.StringVar(), \
                                                                                  tk.StringVar(), \
                                                                                  tk.StringVar()

        amount.set('1')

        def browse_source():
            f_types = [('BNGL', '*.bngl')]

            file_path = filedialog.askopenfilename(filetypes=f_types,
                                                   initialdir=read_s_loc())

            def validate_file():
                check = []
                with open(file_path, 'r') as f:
                    a = f.readlines()
                    for i in a:
                        check_syn = i.rstrip('\n').rstrip()
                        if check_syn == begin:
                            check.append(begin)

                        elif check_syn == end:
                            check.append(end)

                if begin in check and end in check:
                    return 'ready'
                else:
                    none = check[0] if check != [] else 'none'
                    return none

            if os.path.isfile(file_path) and validate_file() == 'ready':
                source_file_path.set(file_path)
                write_s_loc(file_path)
                messages.set('BNGL file selected ✔')

            elif os.path.isfile(file_path) and validate_file() == end:
                messages.set('Source file error, "begin species" line not stated in source file ✘')

            elif os.path.isfile(file_path) and validate_file() == begin:
                messages.set('Source file error, "end species" line not stated in source file ✘')

            elif os.path.isfile(file_path) and validate_file() == 'none':
                messages.set('Source file error, "begin species" and "end species" lines not stated in source file ✘')

            elif not os.path.isfile(file_path) and os.path.isfile(source_file_path.get()):
                messages.set('New source file not selected, returned to previous ✔')

            elif not os.path.isfile(file_path) and not os.path.isfile(source_file_path.get()):
                messages.set('Source file not selected ✘, please try again!')

        def create_bngl_sequence():
            dna_seq = ['A', 'T', 'G', 'C']
            ent = self.sequence_entry.get()
            am = self.amount.get() or 1
            seq = ''.join(c.upper() for c in ent if c.upper() in dna_seq) if len(ent) != 0 else None

            if seq and am:
                bngl_syn = 'N(b~' + seq[0] + ',5,3!1,W)'

                if len(seq) > 2:
                    for i in range(1, len(seq) - 1):
                        bngl_syn += '.N(b~{},5!{},3!{},W)'.format(seq[i], str(i), str(i + 1))

                    bngl_syn += '.N(b~{},5!{},3,W)'.format(seq[-1], str(len(seq) - 1)) + '  ' + str(am)

                elif len(seq) == 2:
                    bngl_syn += '.N(b~{},5!{},3,W)'.format(seq[-1], str(1)) + '  ' + str(am)

                else:
                    messages.set('Minimum two nucleotides required!')
                    return None

                return bngl_syn

            else:
                messages.set('Minimum two nucleotides required!')

        def add_sequence():
            seq = self.sequence_entry.get()
            self.created_list.insert(tk.END,
                                     str('✔  ' + create_bngl_sequence()) + '   ') if create_bngl_sequence() else None
            self.sequence_entry.delete(0, END)
            amount.set('1')
            messages.set('"' + str(seq) + '"' + ' Successfully added!') if seq != '' and len(seq) >= 2 else None
            messages.set('Sequence not entered ✘') if seq == '' else None

        def validate_char(event):
            seq_in = sequence.get()
            allowed = ('A', 'T', 'C', 'G')
            new_seq = []
            if len(event.char) != 0 or len(seq_in) >= 1:
                seq = self.sequence_entry.get()
                for s in seq:
                    if s.upper() in allowed:
                        new_seq.append(s.upper())

            else:
                sequence.set(seq_in)

            sequence.set(''.join(new_seq))

        def validate_num(event):
            seq_in = self.amount.get()
            new_seq = []
            if len(event.char) != 0 or len(seq_in) >= 1:
                for s in seq_in:
                    if s.isdigit():
                        new_seq.append(s)
            else:
                amount.set(seq_in)

            amount.set(''.join(new_seq))

        def write_bngl(a):
            if os.path.isfile(source_file_path.get()):
                list_all = [i[3:-3] for i in list(self.created_list.get(0, END))]
                if list_all != []:
                    source = source_file_path.get()
                    r_source = source.rsplit('/', 1)
                    source_name = r_source[1].rsplit('.', 1)[0]
                    rewrite_name = source_name + '_VDNA' + '.' + r_source[1].rsplit('.', 1)[1]
                    rewrite = r_source[0] + '/' + rewrite_name

                    data, q = [], []
                    type = {'exis': ' with existing ssDNA(s)', 'new': ' without existing ssDNA(s)'}
                    with open(source, 'r') as f:
                        l = f.readlines()
                        for i in l:
                            check_syn = i.rstrip('\n').rstrip()

                            if begin not in q:
                                if check_syn != begin:
                                    data.append(i)

                                elif check_syn == begin:
                                    data.append(check_syn + '\n')
                                    q.append(check_syn)
                                    data.append('\n')
                                    data.append('# written by VDNA ----- begin' + '\n')
                                    data.append('\n')

                                    for s in list_all:
                                        ssdna = s.rsplit('  ', 1)
                                        comm = '# ssDNA sequence of ' + ''.join([e[4] for e in ssdna[0].split('.')]) + \
                                               ', ' + str(ssdna[1]) + ' strand(s),' + " 5' - 3' orientation" + '\n'
                                        new_line = s + '\n'
                                        data.append(comm)
                                        data.append(new_line)
                                        data.append('\n')
                                    data.append('# written by VDNA ----- end' + '\n')
                                    data.append('\n')
                                    q.append('done')

                            elif begin in q and 'done' in q and end not in q:
                                if check_syn != end and a == 'new':
                                    continue

                                elif check_syn != end and a == 'exis':
                                    data.append(i)

                                elif check_syn == end:
                                    data.append(check_syn + '\n')
                                    q.append(check_syn)

                            elif begin in q and 'done' in q and end in q:
                                data.append(i)
                    f.close()

                    with open(rewrite, 'w') as f:
                        for item in data:
                            f.write("%s" % item)
                    f.close()

                    messages.set('BNGL file successfully saved as ' +
                                 '"' + rewrite_name + '"' +
                                 str(type[a]) + ' ✔')
                else:
                    messages.set('Please create ssDNA sequence(s) to write!')
            else:
                messages.set('Please select the source file!')

        def reset():

            def user_consent():
                messages.set('Reset attempt on progress...')

                consent = messagebox.askyesno('Resetting created sequences',
                                              'Resetting will remove all created sequences. '
                                              'This action cannot be undone!' + '\n' + '\n'
                                              'Click "Yes" to reset for a fresh start\n' +
                                              'Click "No" to return back\n',
                                              icon='warning')
                return consent

            if self.created_list.get(0, END) != ():
                if user_consent():
                    self.created_list.delete(0, END)
                    messages.set('List reset done ✔')
                else:
                    messages.set('Returned back ✔')
            else:
                messages.set('Nothing in the list to reset ✘')

        def del_user_consent():
            messages.set('Delete attempt on progress...')

            consent = messagebox.askyesno('Delete selected sequence',
                                          'Are you sure you want to delete the selected sequence?' + '\n' + '\n',
                                          icon='warning')
            return consent

        def del_message(a):
            if a != () and a != 'nothing' and a != 'return':
                ss = a[3:-3].rsplit('  ', 1)[0].split('.')
                sss = ''.join(e[4] for e in ss)
                messages.set('Sequence ' + '"' + sss + '"' + ' deleted ✔')

            elif a == 'nothing':
                messages.set('Nothing selected to delete ✘')

            elif a == 'return':
                messages.set('Returned back ✔')

        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#ececec' # Closest X11 color: 'gray92' 
        font10 = "-family Calibri -size 11 -weight normal -slant roman"  \
            " -underline 0 -overstrike 0"
        font11 = "-family {Segoe UI} -size 9 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        font12 = "-family {Segoe UI} -size 13 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        font13 = "-family {Segoe UI} -size 10 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        font14 = "-family {Segoe UI} -size 12 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        font9 = "-family {Segoe UI} -size 16 -weight bold -slant roman"  \
            " -underline 0 -overstrike 0"

        top.geometry("1000x778+525+110")
        top.title("VDNA - BNGL ssDNA Creator")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")
        top.resizable(False, False)

        self.created_list = tk.Listbox(top)
        self.created_list.place(relx=0.05,
                                rely=0.27,
                                relheight=0.408,
                                relwidth=0.872)
        self.created_list.configure(background="white")
        self.created_list.configure(disabledforeground="#a3a3a3")
        self.created_list.configure(font=font13)
        self.created_list.configure(foreground="#000000")
        self.created_list.configure(highlightbackground="#d9d9d9")
        self.created_list.configure(highlightcolor="black")
        self.created_list.configure(highlightthickness="0")
        self.created_list.configure(selectbackground="#c4c4c4")
        self.created_list.configure(selectforeground="black")
        self.created_list.configure(width=864)

        self.source_entry = tk.Entry(top, textvariable=source_file_path)
        self.source_entry.place(relx=0.05,
                                rely=0.116,
                                height=28,
                                relwidth=0.794)

        self.source_entry.configure(background="white")
        self.source_entry.configure(disabledforeground="#a3a3a3")
        self.source_entry.configure(font=font10)
        self.source_entry.configure(foreground="#000000")
        self.source_entry.configure(highlightbackground="#d9d9d9")
        self.source_entry.configure(highlightcolor="black")
        self.source_entry.configure(insertbackground="black")
        self.source_entry.configure(selectbackground="#c4c4c4")
        self.source_entry.configure(selectforeground="black")

        self.sequence_entry = tk.Entry(top, textvariable=sequence)
        self.sequence_entry.place(relx=0.05,
                                  rely=0.823,
                                  height=28,
                                  relwidth=0.588)
        self.sequence_entry.bind('<KeyRelease>', validate_char)
        self.sequence_entry.configure(background="white")
        self.sequence_entry.configure(disabledforeground="#a3a3a3")
        self.sequence_entry.configure(font=font10)
        self.sequence_entry.configure(foreground="#000000")
        self.sequence_entry.configure(highlightbackground="#d9d9d9")
        self.sequence_entry.configure(highlightcolor="black")
        self.sequence_entry.configure(insertbackground="black")
        self.sequence_entry.configure(selectbackground="#c4c4c4")
        self.sequence_entry.configure(selectforeground="black")

        self.amount = tk.Entry(top,
                               textvariable=amount,
                               justify='center')
        self.amount.bind('<KeyRelease>', validate_num)
        self.amount.place(relx=0.66,
                          rely=0.823,
                          height=28,
                          relwidth=0.098)
        self.amount.configure(background="white")
        self.amount.configure(disabledforeground="#a3a3a3")
        self.amount.configure(font=font10)
        self.amount.configure(foreground="#000000")
        self.amount.configure(highlightbackground="#d9d9d9")
        self.amount.configure(highlightcolor="black")
        self.amount.configure(insertbackground="black")
        self.amount.configure(selectbackground="#c4c4c4")
        self.amount.configure(selectforeground="black")
        self.amount.configure(width=98)

        self.source_button = tk.Button(top, command=browse_source)
        self.source_button.place(relx=0.865,
                                 rely=0.116,
                                 height=28,
                                 width=78)
        self.source_button.configure(activebackground="#ececec")
        self.source_button.configure(activeforeground="#000000")
        self.source_button.configure(background="#d9d9d9")
        self.source_button.configure(disabledforeground="#a3a3a3")
        self.source_button.configure(font=font13)
        self.source_button.configure(foreground="#000000")
        self.source_button.configure(highlightbackground="#d9d9d9")
        self.source_button.configure(highlightcolor="black")
        self.source_button.configure(pady="0")
        self.source_button.configure(text='''Browse''')

        self.delete_button = tk.Button(top, command=lambda lb=self.created_list:
                                      [(del_message(self.created_list.get(self.created_list.curselection())),
                                       lb.delete(self.created_list.curselection()))
                                       if self.created_list.curselection() != () and del_user_consent()
                                       else del_message('return')]
                                       if self.created_list.curselection() != () else del_message('nothing'))

        self.delete_button.place(relx=0.24,
                                 rely=0.733,
                                 height=38,
                                 width=98)
        self.delete_button.configure(activebackground="#ececec")
        self.delete_button.configure(activeforeground="#000000")
        self.delete_button.configure(background="#d9d9d9")
        self.delete_button.configure(disabledforeground="#a3a3a3")
        self.delete_button.configure(font=font13)
        self.delete_button.configure(foreground="#000000")
        self.delete_button.configure(highlightbackground="#d9d9d9")
        self.delete_button.configure(highlightcolor="black")
        self.delete_button.configure(pady="0")
        self.delete_button.configure(text='''Delete''')
        self.delete_button.configure(width=98)

        self.add_button = tk.Button(top, command=add_sequence)
        self.add_button.place(relx=0.835,
                              rely=0.797,
                              height=68,
                              width=108)
        self.add_button.configure(activebackground="#ececec")
        self.add_button.configure(activeforeground="#000000")
        self.add_button.configure(background="#d9d9d9")
        self.add_button.configure(disabledforeground="#a3a3a3")
        self.add_button.configure(font=font12)
        self.add_button.configure(foreground="#000000")
        self.add_button.configure(highlightbackground="#d9d9d9")
        self.add_button.configure(highlightcolor="black")
        self.add_button.configure(pady="0")
        self.add_button.configure(text='''Add''')
        self.add_button.configure(width=108)

        self.source_input_label = tk.Label(top)
        self.source_input_label.place(relx=0.05,
                                      rely=0.09,
                                      height=16,
                                      width=117)
        self.source_input_label.configure(activebackground="#f9f9f9")
        self.source_input_label.configure(activeforeground="black")
        self.source_input_label.configure(background="#d9d9d9")
        self.source_input_label.configure(disabledforeground="#a3a3a3")
        self.source_input_label.configure(font=font13)
        self.source_input_label.configure(foreground="#000000")
        self.source_input_label.configure(highlightbackground="#d9d9d9")
        self.source_input_label.configure(highlightcolor="black")
        self.source_input_label.configure(text='''Source BNGL file''')

        self.list_label = tk.Label(top)
        self.list_label.place(relx=0.05,
                              rely=0.244,
                              height=16,
                              width=187)
        self.list_label.configure(activebackground="#f9f9f9")
        self.list_label.configure(activeforeground="black")
        self.list_label.configure(background="#d9d9d9")
        self.list_label.configure(disabledforeground="#a3a3a3")
        self.list_label.configure(font=font13)
        self.list_label.configure(foreground="#000000")
        self.list_label.configure(highlightbackground="#d9d9d9")
        self.list_label.configure(highlightcolor="black")
        self.list_label.configure(text='''List of ssDNA to be created''')

        self.add_label = tk.Label(top)
        self.add_label.place(relx=0.05,
                             rely=0.797,
                             height=16,
                             width=167)
        self.add_label.configure(activebackground="#f9f9f9")
        self.add_label.configure(activeforeground="black")
        self.add_label.configure(background="#d9d9d9")
        self.add_label.configure(disabledforeground="#a3a3a3")
        self.add_label.configure(font=font13)
        self.add_label.configure(foreground="#000000")
        self.add_label.configure(highlightbackground="#d9d9d9")
        self.add_label.configure(highlightcolor="black")
        self.add_label.configure(text='''Desired ssDNA sequence''')

        self.amount_label = tk.Label(top)
        self.amount_label.place(relx=0.68,
                                rely=0.797,
                                height=16,
                                width=57)
        self.amount_label.configure(activebackground="#f9f9f9")
        self.amount_label.configure(activeforeground="black")
        self.amount_label.configure(background="#d9d9d9")
        self.amount_label.configure(disabledforeground="#a3a3a3")
        self.amount_label.configure(font=font13)
        self.amount_label.configure(foreground="#000000")
        self.amount_label.configure(highlightbackground="#d9d9d9")
        self.amount_label.configure(highlightcolor="black")
        self.amount_label.configure(text='''Amount''')

        self.main_title = tk.Label(top)
        self.main_title.place(relx=0.4,
                              rely=0.026,
                              height=26,
                              width=237)
        self.main_title.configure(activebackground="#f9f9f9")
        self.main_title.configure(activeforeground="black")
        self.main_title.configure(background="#d9d9d9")
        self.main_title.configure(disabledforeground="#a3a3a3")
        self.main_title.configure(font=font9)
        self.main_title.configure(foreground="#000000")
        self.main_title.configure(highlightbackground="#d9d9d9")
        self.main_title.configure(highlightcolor="black")
        self.main_title.configure(text='''BNGL ssDNA Creator''')

        self.allowed_label = tk.Label(top)
        self.allowed_label.place(relx=0.25,
                                 rely=0.861,
                                 height=16,
                                 width=180)
        self.allowed_label.configure(activebackground="#f9f9f9")
        self.allowed_label.configure(activeforeground="black")
        self.allowed_label.configure(background="#d9d9d9")
        self.allowed_label.configure(disabledforeground="#a3a3a3")
        self.allowed_label.configure(font=font11)
        self.allowed_label.configure(foreground="#000000")
        self.allowed_label.configure(highlightbackground="#d9d9d9")
        self.allowed_label.configure(highlightcolor="black")
        self.allowed_label.configure(text='''Allowed characters (A, T, C, G)''')

        self.general_messages = tk.Label(top,
                                         textvariable=messages,
                                         anchor='w',
                                         font=("Segoe UI", 12, "bold"))
        self.general_messages.place(relx=0.047,
                                    rely=0.180,
                                    height=26,
                                    width=887)
        self.general_messages.configure(activebackground="#f9f9f9")
        self.general_messages.configure(activeforeground="black")
        self.general_messages.configure(background="#d9d9d9")
        self.general_messages.configure(disabledforeground="#a3a3a3")
        self.general_messages.configure(foreground="blue")
        self.general_messages.configure(highlightbackground="#d9d9d9")
        self.general_messages.configure(highlightcolor="black")

        self.submit_without_button = tk.Button(top, command=lambda: write_bngl('new'))
        self.submit_without_button.place(relx=0.53,
                                         rely=0.913,
                                         height=41,
                                         width=288)
        self.submit_without_button.configure(activebackground="#ececec")
        self.submit_without_button.configure(activeforeground="#000000")
        self.submit_without_button.configure(background="#d9d9d9")
        self.submit_without_button.configure(disabledforeground="#a3a3a3")
        self.submit_without_button.configure(font=font14)
        self.submit_without_button.configure(foreground="#000000")
        self.submit_without_button.configure(highlightbackground="#d9d9d9")
        self.submit_without_button.configure(highlightcolor="black")
        self.submit_without_button.configure(pady="0")
        self.submit_without_button.configure(text='''Submit without existing ssDNAs''')
        self.submit_without_button.configure(width=288)

        self.submit_with_button = tk.Button(top, command=lambda: write_bngl('exis'))
        self.submit_with_button.place(relx=0.18,
                                      rely=0.913,
                                      height=41,
                                      width=288)
        self.submit_with_button.configure(activebackground="#ececec")
        self.submit_with_button.configure(activeforeground="#000000")
        self.submit_with_button.configure(background="#d9d9d9")
        self.submit_with_button.configure(disabledforeground="#a3a3a3")
        self.submit_with_button.configure(font=font14)
        self.submit_with_button.configure(foreground="#000000")
        self.submit_with_button.configure(highlightbackground="#d9d9d9")
        self.submit_with_button.configure(highlightcolor="black")
        self.submit_with_button.configure(pady="0")
        self.submit_with_button.configure(text='''Submit with existing ssDNAs''')
        self.submit_with_button.configure(width=288)

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.921,
                          rely=0.267,
                          height=320,
                          width=23)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.048,
                          rely=0.676,
                          height=23,
                          width=896)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")

        self.reset_button = tk.Button(top, command=reset)
        self.reset_button.place(relx=0.66,
                                rely=0.733,
                                height=38,
                                width=98)
        self.reset_button.configure(activebackground="#ececec")
        self.reset_button.configure(activeforeground="#000000")
        self.reset_button.configure(background="#d9d9d9")
        self.reset_button.configure(disabledforeground="#a3a3a3")
        self.reset_button.configure(font=font13)
        self.reset_button.configure(foreground="#000000")
        self.reset_button.configure(highlightbackground="#d9d9d9")
        self.reset_button.configure(highlightcolor="black")
        self.reset_button.configure(pady="0")
        self.reset_button.configure(text='''Reset''')
        self.reset_button.configure(width=98)

        self.scrollbar_1 = tk.Scrollbar(self.Label1, orient="vertical")
        self.scrollbar_1.configure(command=self.created_list.yview)
        self.scrollbar_1.pack(side="right", fill="y")

        self.created_list.configure(yscrollcommand=self.scrollbar_1.set)

        self.scrollbar_2 = tk.Scrollbar(self.Label2, orient="horizontal")
        self.scrollbar_2.configure(command=self.created_list.xview)
        self.scrollbar_2.pack(side="bottom", fill="x")

        self.created_list.configure(xscrollcommand=self.scrollbar_2.set)


if __name__ == '__main__':
    vp_start_gui()
