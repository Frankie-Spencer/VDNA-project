#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.19
#  in conjunction with Tcl version 8.6
#    Mar 11, 2019 01:53:39 PM EET  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import run_bngl_v02_support

from tkinter import (filedialog,
                     DISABLED,
                     NORMAL,
                     messagebox)
import os
import threading

from sys_cache.cache import (read_s_loc,
                             write_s_loc,
                             read_d_loc,
                             write_d_loc)


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = run_bngl_top (root)
    run_bngl_v02_support.init(root, top)
    root.mainloop()


w = None


def create_run_bngl_top(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = run_bngl_top (w)
    run_bngl_v02_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_run_bngl_top():
    global w
    w.destroy()
    w = None


class run_bngl_top:

    global recog, created_set, created_set_n, active_item_n, messages, source_file_path, des_dir_path, sequence, amount

    def __init__(self, top=None):
        start_time, end_time, n_steps, messages, source_file_path, des_dir_path = tk.StringVar(), \
                                                                                  tk.StringVar(), \
                                                                                  tk.StringVar(), \
                                                                                  tk.StringVar(), \
                                                                                  tk.StringVar(), \
                                                                                  tk.StringVar()

        start_time.set('0'), end_time.set('1'), n_steps.set('10')

        def validate_file(p):

            def user_consent(s):
                messages.set('Input file validation error ✘')

                consent = messagebox.askyesno('BNGL file validation error',
                                              'Unable to process the given input file, because it contains the '
                                              'following line:' + '\n' + '\n' + s + '\n' +
                                              'Click "Yes" if you consent the program to comment out that line\n' +
                                              'Click "No" if you wish to do it manually\n',
                                              icon='warning')
                return consent

            def re_write_input_file(c):

                data = []

                with open(c, 'r') as f:
                    a = f.readlines()
                    for i in a:
                        if not i.startswith('simulate'):
                            data.append(i)

                        elif i.startswith('simulate'):
                            new_line = '# ' + i
                            data.append(new_line)
                f.close()

                with open(c, 'w') as f:
                    for item in data:
                        f.write("%s" % item)
                f.close()
                return True

            check = []
            with open(p, 'r') as f:
                a = f.readlines()
                for i in a:
                    if i.startswith('simulate'):
                        check.append(i)
            f.close()

            if check == []:
                return True

            elif check != []:
                consent = user_consent(check[0])
                if consent:
                    return re_write_input_file(p)
                elif not consent:
                    return False

        def validate_inputs(a):

            st_time = str(start_time.get())[-1] if len(str(start_time.get())) > 0 else None
            ed_time = str(end_time.get())[-1] if len(str(end_time.get())) > 0 else None

            if start_time.get() == '' or end_time.get() == '' or n_steps.get() == '':
                self.run_button.configure(state=DISABLED)
                messages.set('Any of the below fields cannot be empty ✘')

            elif st_time == '.' or ed_time == '.':
                self.run_button.configure(state=DISABLED)
                messages.set('Error found on some fields, please check ✘')

            elif float(start_time.get()) == float(end_time.get()):
                self.run_button.configure(state=DISABLED)
                messages.set('"Start time" and "End time" cannot be same ✘')

            elif float(start_time.get()) > float(end_time.get()):
                self.run_button.configure(state=DISABLED)
                messages.set('"Start time" must be less than "End time" ✘')

            elif not float(end_time.get()) > 0:
                self.run_button.configure(state=DISABLED)
                messages.set('"End time" must be a positive value ✘')

            elif not int(n_steps.get()) > 0:
                self.run_button.configure(state=DISABLED)
                messages.set('"# dump files" must be a positive value ✘')

            elif not os.path.isfile(source_file_path.get()):
                self.run_button.configure(state=DISABLED)
                messages.set('Input BNGL file is not selected ✘')

            elif os.path.isfile(source_file_path.get()) and not validate_file(source_file_path.get()):
                self.run_button.configure(state=DISABLED)
                source_file_path.set('')
                write_s_loc('')
                messages.set('Please edit the BNGL file and try again!')

            elif not os.path.isdir(des_dir_path.get()):
                self.run_button.configure(state=DISABLED)
                messages.set('Destination dump directory not selected ✘')

            else:
                self.run_button.configure(state=NORMAL)
                messages.set('Program ready to run!')
                return True

        def browse_source():

            f_types = [('BNGL', '*.bngl')]

            file_path = filedialog.askopenfilename(filetypes=f_types,
                                                   initialdir=os.path.dirname(read_s_loc()))

            if os.path.isfile(file_path):
                if validate_file(file_path):
                    source_file_path.set(file_path)
                    write_s_loc(file_path)
                    validate_inputs('')

            elif not os.path.isfile(file_path) and os.path.isfile(source_file_path.get()):
                if validate_file(source_file_path.get()):
                    write_s_loc(source_file_path.get())
                    messages.set('New BNGL file not selected, returned to previous ✔')

                else:
                    source_file_path.set('')
                    messages.set('Please edit the BNGL file and try again!')

            elif not os.path.isfile(file_path) and not os.path.isfile(source_file_path.get()):
                messages.set('Source file not selected ✘, please try again!')

        def browse_des():

            save_dir = filedialog.askdirectory(initialdir=read_d_loc())

            if os.path.isdir(save_dir):
                des_dir_path.set(save_dir)
                write_d_loc(save_dir)
                validate_inputs('')

            elif not os.path.isdir(save_dir) and os.path.isdir(des_dir_path.get()):
                messages.set('New destination folder not selected, returned to previous ✔')

            elif not os.path.isdir(save_dir) and not os.path.isdir(des_dir_path.get()):
                messages.set('Destination folder not selected ✘, please try again!')

        def run_bngl():

            if validate_inputs(''):
                start_time = self.start_time.get()
                end_time = self.end_time.get()
                n_steps = self.n_steps.get()

                dump = {'start': start_time,
                        'period': str(round((float(end_time) / float(n_steps)), 4)),
                        'end': end_time,
                        'steps': n_steps}

                def get_source(s):
                    file_dir_name = s.rsplit('/', 1)
                    file_name_full = file_dir_name[1]
                    file_name = file_dir_name[1].rsplit('.', 1)[0]
                    file_type = file_dir_name[1].rsplit('.', 1)[1]

                    file = {'file_dir': file_dir_name[0],
                            'file_name_full': file_name_full,
                            'file_name': file_name,
                            'file_type': file_type
                            }
                    return file

                input_info = get_source(source_file_path.get())

                def creat_dump_folder():
                    dump_dir = des_dir_path.get()

                    def creat_folder(name):
                        nums = []
                        try:
                            existing = list(next(os.walk(dump_dir)))[1]
                            for i in existing:
                                n_num = i.rsplit('--', 1)
                                if name == n_num[0]:
                                    nums.append(int(n_num[1]))
                        except:
                            pass

                        new_name = name + '--' + (str(max(nums) + 1) if nums != [] else '1')
                        return new_name

                    dump_folder_name = creat_folder(input_info['file_name'])
                    dump_dir = dump_dir.replace('/', '\\') + '\\' + dump_folder_name

                    return [dump_dir, dump_folder_name]

                dump_info = creat_dump_folder()

                def get_file_location(d):
                    chars = ['\\', '/', '_', ':', '-', '.']
                    dir = ''

                    for c in d:
                        if c.isalpha() or c.isdigit() or c in chars:
                            dir += c
                        else:
                            dir += '^' + c
                    return dir

                nfsim_path = get_file_location(os.path.abspath(__file__).rsplit('\\', 2)[0])
                input_file_path = get_file_location(input_info['file_dir'].replace('/', '\\') + '\\')
                dump_dir_path = get_file_location(dump_info[0])

                syntax = [nfsim_path + '\\NFsim_v1.11\\bng2.pl -xml',
                          nfsim_path + '\\NFsim_v1.11\\bin\\NFsim_MSWin32.exe -utl 300 -xml',
                          '-dump', '-oSteps', '-sim', '-o']

                syn_1 = syntax[0] + ' "' + input_file_path + get_file_location(input_info['file_name_full'])
                syn_2 = syntax[1] + ' "' + input_file_path + get_file_location(input_info['file_name']) + '.xml" ' +  \
                        syntax[2] + ' "' + '[' + dump['start'] + ':' + dump['period'] + ':' + dump['end'] + ']-^>' + \
                        dump_dir_path + '/" ' + syntax[3] + ' ' + dump['steps'] + ' ' + syntax[4] + ' ' + \
                        end_time

                cmd_command = 'START CMD /K "CD ' + input_file_path + ' && ' + syn_1 + '"' + ' && ' + 'md ' + '"' + \
                              dump_dir_path + '"' + ' && ' + syn_2 + '"'

                x = lambda: os.system(cmd_command)
                t = threading.Thread(target=x)
                t.start()
                messages.set('Processing data on CMD!')

        def session_return():
            state = []
            if os.path.isdir(read_d_loc()):
                des_dir_path.set(read_d_loc())
                state.append('source')

            if os.path.isfile(read_s_loc()):
                source_file_path.set(read_s_loc())
                state.append('des')

            messages.set("Previous session's Source and Destination set!") if state == ['source', 'des'] else None
            messages.set("Previous session's Destination only set!") if state == ['source'] else None
            messages.set("Previous session's Source only set!") if state == ['des'] else None
            messages.set('Program ready!') if state == [] else None

        session_return()

        def validate_num(event, k):
            seq_in = k.get()
            new_seq = []
            if k is not n_steps:
                if len(event.char) != 0 or len(seq_in) >= 1:
                    for s in seq_in:
                        if s == '.':
                            if not seq_in.count('.') > 1:
                                new_seq.append(s)
                        elif s.isdigit() or s == '.':
                            new_seq.append(s)
                else:
                    k.set(seq_in)

            if k is n_steps:
                if len(event.char) != 0 or len(seq_in) >= 1:
                    for s in seq_in:
                        if s.isdigit():
                            new_seq.append(s)
                else:
                    k.set(seq_in)

            k.set(''.join(new_seq))

        def validate_start(event):
            validate_num(event, start_time)
            validate_inputs('')

        def validate_end(event):
            validate_num(event, end_time)
            validate_inputs('')

        def validate_n_steps(event):
            validate_num(event, n_steps)
            validate_inputs('')

        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        font10 = "-family {Segoe UI} -size 8 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        font11 = "-family {Segoe UI} -size 14 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        font9 = "-family {Segoe UI} -size 12 -weight bold -slant roman"  \
            " -underline 0 -overstrike 0"

        top.geometry("600x440+650+150")
        top.title("Run BNGL")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")
        top.resizable(False, False)

        self.browse_source_button = tk.Button(top, command=browse_source)
        self.browse_source_button.place(relx=0.833,
                                        rely=0.205,
                                        height=28,
                                        width=58)

        self.browse_source_button.configure(activebackground="#ececec")
        self.browse_source_button.configure(activeforeground="#000000")
        self.browse_source_button.configure(background="#d9d9d9")
        self.browse_source_button.configure(disabledforeground="#a3a3a3")
        self.browse_source_button.configure(foreground="#000000")
        self.browse_source_button.configure(highlightbackground="#d9d9d9")
        self.browse_source_button.configure(highlightcolor="black")
        self.browse_source_button.configure(pady="0")
        self.browse_source_button.configure(text='''Browse''')

        self.input_file_entry = tk.Entry(top, textvariable=source_file_path)
        self.input_file_entry.bind('<KeyRelease>', validate_inputs)
        self.input_file_entry.place(relx=0.083,
                                    rely=0.205,
                                    height=28,
                                    relwidth=0.723)

        self.input_file_entry.configure(background="white")
        self.input_file_entry.configure(disabledforeground="#a3a3a3")
        self.input_file_entry.configure(font="TkFixedFont")
        self.input_file_entry.configure(foreground="#000000")
        self.input_file_entry.configure(highlightbackground="#d9d9d9")
        self.input_file_entry.configure(highlightcolor="black")
        self.input_file_entry.configure(insertbackground="black")
        self.input_file_entry.configure(selectbackground="#c4c4c4")
        self.input_file_entry.configure(selectforeground="black")
        self.input_file_entry.configure(width=434)

        self.source_file_label = tk.Label(top)
        self.source_file_label.place(relx=0.083,
                                     rely=0.148,
                                     height=23,
                                     width=67)

        self.source_file_label.configure(activebackground="#f9f9f9")
        self.source_file_label.configure(activeforeground="black")
        self.source_file_label.configure(background="#d9d9d9")
        self.source_file_label.configure(disabledforeground="#a3a3a3")
        self.source_file_label.configure(foreground="#000000")
        self.source_file_label.configure(highlightbackground="#d9d9d9")
        self.source_file_label.configure(highlightcolor="black")
        self.source_file_label.configure(text='''Source file''')

        self.Run_bngl_title = tk.Label(top)
        self.Run_bngl_title.place(relx=0.333,
                                  rely=0.023,
                                  height=36,
                                  width=209)

        self.Run_bngl_title.configure(activebackground="#f9f9f9")
        self.Run_bngl_title.configure(activeforeground="black")
        self.Run_bngl_title.configure(background="#d9d9d9")
        self.Run_bngl_title.configure(disabledforeground="#a3a3a3")
        self.Run_bngl_title.configure(font=font11)
        self.Run_bngl_title.configure(foreground="#000000")
        self.Run_bngl_title.configure(highlightbackground="#d9d9d9")
        self.Run_bngl_title.configure(highlightcolor="black")
        self.Run_bngl_title.configure(text='''Run BNGL Smoothly''')

        self.start_time = tk.Entry(top,
                                   textvariable=start_time,
                                   justify='center')

        self.start_time.bind('<KeyRelease>', validate_start)
        self.start_time.place(relx=0.083,
                              rely=0.831,
                              height=21,
                              relwidth=0.157)

        self.start_time.configure(background="white")
        self.start_time.configure(disabledforeground="#a3a3a3")
        self.start_time.configure(font="TkFixedFont")
        self.start_time.configure(foreground="#000000")
        self.start_time.configure(highlightbackground="#d9d9d9")
        self.start_time.configure(highlightcolor="black")
        self.start_time.configure(insertbackground="black")
        self.start_time.configure(selectbackground="#c4c4c4")
        self.start_time.configure(selectforeground="black")

        self.n_steps = tk.Entry(top, textvariable=n_steps, justify='center')
        self.n_steps.bind('<KeyRelease>', validate_n_steps)
        self.n_steps.place(relx=0.283,
                           rely=0.831,
                           height=21,
                           relwidth=0.157)

        self.n_steps.configure(background="white")
        self.n_steps.configure(disabledforeground="#a3a3a3")
        self.n_steps.configure(font="TkFixedFont")
        self.n_steps.configure(foreground="#000000")
        self.n_steps.configure(highlightbackground="#d9d9d9")
        self.n_steps.configure(highlightcolor="black")
        self.n_steps.configure(insertbackground="black")
        self.n_steps.configure(selectbackground="#c4c4c4")
        self.n_steps.configure(selectforeground="black")

        self.end_time = tk.Entry(top,
                                 textvariable=end_time,
                                 justify='center')

        self.end_time.bind('<KeyRelease>', validate_end)
        self.end_time.place(relx=0.483,
                            rely=0.831,
                            height=21,
                            relwidth=0.157)

        self.end_time.configure(background="white")
        self.end_time.configure(disabledforeground="#a3a3a3")
        self.end_time.configure(font="TkFixedFont")
        self.end_time.configure(foreground="#000000")
        self.end_time.configure(highlightbackground="#d9d9d9")
        self.end_time.configure(highlightcolor="black")
        self.end_time.configure(insertbackground="black")
        self.end_time.configure(selectbackground="#c4c4c4")
        self.end_time.configure(selectforeground="black")

        self.run_button = tk.Button(top,
                                    state=DISABLED,
                                    command=run_bngl)

        self.run_button.place(relx=0.75,
                              rely=0.809,
                              height=48,
                              width=108)

        self.run_button.configure(activebackground="#ececec")
        self.run_button.configure(activeforeground="#000000")
        self.run_button.configure(background="#d9d9d9")
        self.run_button.configure(disabledforeground="#a3a3a3")
        self.run_button.configure(font=font9)
        self.run_button.configure(foreground="#000000")
        self.run_button.configure(highlightbackground="#d9d9d9")
        self.run_button.configure(highlightcolor="black")
        self.run_button.configure(pady="0")
        self.run_button.configure(text='''Run''')

        self.start_label = tk.Label(top)
        self.start_label.place(relx=0.108,
                               rely=0.774,
                               height=23,
                               width=62)

        self.start_label.configure(activebackground="#f9f9f9")
        self.start_label.configure(activeforeground="black")
        self.start_label.configure(background="#d9d9d9")
        self.start_label.configure(disabledforeground="#a3a3a3")
        self.start_label.configure(foreground="#000000")
        self.start_label.configure(highlightbackground="#d9d9d9")
        self.start_label.configure(highlightcolor="black")
        self.start_label.configure(text='''Start time''')

        self.amount_steps_label = tk.Label(top)
        self.amount_steps_label.place(relx=0.275,
                                      rely=0.774,
                                      height=23,
                                      width=102)

        self.amount_steps_label.configure(activebackground="#f9f9f9")
        self.amount_steps_label.configure(activeforeground="black")
        self.amount_steps_label.configure(background="#d9d9d9")
        self.amount_steps_label.configure(disabledforeground="#a3a3a3")
        self.amount_steps_label.configure(foreground="#000000")
        self.amount_steps_label.configure(highlightbackground="#d9d9d9")
        self.amount_steps_label.configure(highlightcolor="black")
        self.amount_steps_label.configure(text='''# of dump files''')

        self.sim_end_label = tk.Label(top)
        self.sim_end_label.place(relx=0.508,
                                 rely=0.774,
                                 height=23,
                                 width=62)

        self.sim_end_label.configure(activebackground="#f9f9f9")
        self.sim_end_label.configure(activeforeground="black")
        self.sim_end_label.configure(background="#d9d9d9")
        self.sim_end_label.configure(disabledforeground="#a3a3a3")
        self.sim_end_label.configure(foreground="#000000")
        self.sim_end_label.configure(highlightbackground="#d9d9d9")
        self.sim_end_label.configure(highlightcolor="black")
        self.sim_end_label.configure(text='''Sim. end''')

        self.general_messages = tk.Label(top, textvariable=messages,
                                         anchor='w',
                                         font=("Segoe UI", 12, "bold"))

        self.general_messages.place(relx=0.083,
                                    rely=0.39,
                                    height=33,
                                    width=507)

        self.general_messages.configure(activebackground="#f9f9f9")
        self.general_messages.configure(activeforeground="black")
        self.general_messages.configure(background="#d9d9d9")
        self.general_messages.configure(disabledforeground="#a3a3a3")
        self.general_messages.configure(foreground="blue")
        self.general_messages.configure(highlightbackground="#d9d9d9")
        self.general_messages.configure(highlightcolor="black")
        self.general_messages.configure(text='''Messages''')
        self.general_messages.configure(width=507)

        self.accepted_type_label = tk.Label(top)
        self.accepted_type_label.place(relx=0.317,
                                       rely=0.273,
                                       height=23,
                                       width=157)

        self.accepted_type_label.configure(activebackground="#f9f9f9")
        self.accepted_type_label.configure(activeforeground="black")
        self.accepted_type_label.configure(background="#d9d9d9")
        self.accepted_type_label.configure(disabledforeground="#a3a3a3")
        self.accepted_type_label.configure(font=font10)
        self.accepted_type_label.configure(foreground="#000000")
        self.accepted_type_label.configure(highlightbackground="#d9d9d9")
        self.accepted_type_label.configure(highlightcolor="black")
        self.accepted_type_label.configure(text='''Accepted file type ( .bngl )''')

        self.dump_folder_entry = tk.Entry(top, textvariable=des_dir_path)
        self.dump_folder_entry.bind('<KeyRelease>', validate_inputs)
        self.dump_folder_entry.place(relx=0.083,
                                     rely=0.604,
                                     height=28,
                                     relwidth=0.723)

        self.dump_folder_entry.configure(background="white")
        self.dump_folder_entry.configure(disabledforeground="#a3a3a3")
        self.dump_folder_entry.configure(font="TkFixedFont")
        self.dump_folder_entry.configure(foreground="#000000")
        self.dump_folder_entry.configure(highlightbackground="#d9d9d9")
        self.dump_folder_entry.configure(highlightcolor="black")
        self.dump_folder_entry.configure(insertbackground="black")
        self.dump_folder_entry.configure(selectbackground="#c4c4c4")
        self.dump_folder_entry.configure(selectforeground="black")
        self.dump_folder_entry.configure(width=434)

        self.browse_dump_folder_button = tk.Button(top, command=browse_des)
        self.browse_dump_folder_button.place(relx=0.833,
                                             rely=0.604,
                                             height=28,
                                             width=58)

        self.browse_dump_folder_button.configure(activebackground="#ececec")
        self.browse_dump_folder_button.configure(activeforeground="#000000")
        self.browse_dump_folder_button.configure(background="#d9d9d9")
        self.browse_dump_folder_button.configure(disabledforeground="#a3a3a3")
        self.browse_dump_folder_button.configure(foreground="#000000")
        self.browse_dump_folder_button.configure(highlightbackground="#d9d9d9")
        self.browse_dump_folder_button.configure(highlightcolor="black")
        self.browse_dump_folder_button.configure(pady="0")
        self.browse_dump_folder_button.configure(text='''Browse''')

        self.dump_folder_entry_label = tk.Label(top)
        self.dump_folder_entry_label.place(relx=0.083,
                                           rely=0.547,
                                           height=23,
                                           width=98)

        self.dump_folder_entry_label.configure(activebackground="#f9f9f9")
        self.dump_folder_entry_label.configure(activeforeground="black")
        self.dump_folder_entry_label.configure(background="#d9d9d9")
        self.dump_folder_entry_label.configure(disabledforeground="#a3a3a3")
        self.dump_folder_entry_label.configure(foreground="#000000")
        self.dump_folder_entry_label.configure(highlightbackground="#d9d9d9")
        self.dump_folder_entry_label.configure(highlightcolor="black")
        self.dump_folder_entry_label.configure(text='''Dump directory''')
        self.dump_folder_entry_label.configure(width=77)

        validate_inputs('')


if __name__ == '__main__':
    vp_start_gui()
