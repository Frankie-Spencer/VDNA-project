#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.19
#  in conjunction with Tcl version 8.6
#    Feb 12, 2019 05:20:11 PM EET  platform: Windows NT

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import UI_design_v003_support

from tkinter import filedialog, messagebox
from tkinter import *
import os
import webbrowser
import threading
import string
import shutil
from ctypes import windll

import browse_and_parse_v02
from sys_cache.cache import (write_s_loc,
                             write_d_loc,
                             read_s_loc, read_d_loc,
                             read_browser_loc,
                             write_browser_loc)

from sys_cache.search_chrome_browser import get_bowser_location

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = virtual_dna_lab (root)
    UI_design_v003_support.init(root, top)
    root.mainloop()

w = None
def create_virtual_dna_lab(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = virtual_dna_lab (w)
    UI_design_v003_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_virtual_dna_lab():
    global w
    w.destroy()
    w = None


class virtual_dna_lab:
    global source_file_path, des_dir_path, selected_folder, messages, messages_pop

    def __init__(self, top=None):
        source_file_path, des_dir_path, history, selected_folder, messages, messages_pop = tk.StringVar(), \
                                                                                           tk.StringVar(), \
                                                                                           tk.StringVar(), \
                                                                                           tk.StringVar(), \
                                                                                           tk.StringVar(), \
                                                                                           tk.StringVar()

        def get_drives():
            drives = []
            bitmask = windll.kernel32.GetLogicalDrives()
            for letter in string.ascii_uppercase:
                if bitmask & 1:
                    drives.append(letter.lower() + ':/')
                bitmask >>= 1

            return drives

        def run_button_update():

            if os.path.isfile(source_file_path.get()):
                source_file_path.get()

            if des_dir_path.get() != '':
                des_dir_path.get()

            if os.path.isfile(source_file_path.get()) and \
                             des_dir_path.get() != '' and \
                             des_dir_path.get().lower().startswith(tuple(get_drives())):
                self.run_process.configure(state=NORMAL)
            else:
                self.run_process.configure(state=DISABLED)

        def browse_source():
            # Allow user to select a directory and store it in global var
            # called file_path

            f_types = [('Species, Dump',
                       '*.species *.0')]

            file_path = filedialog.askopenfilename(filetypes=f_types,
                                                   initialdir=read_s_loc())

            check_type = file_path.rsplit('.', 1)[1] if len(file_path) != 0 else None

            dic_type = {'species': 'Species', '0': 'Dump'}
            if os.path.isfile(file_path):
                source_file_path.set(file_path)
                write_s_loc(file_path)
                messages.set('Selected source file recognized as "' + dic_type[check_type] + '" file ✔')

            elif not os.path.isfile(file_path) and os.path.isfile(source_file_path.get()):
                messages.set('New source file not selected, returned to previous ✔')

            elif not os.path.isfile(file_path) and not os.path.isfile(source_file_path.get()):
                messages.set('Source file not selected ✘, please try again!')

            run_button_update()

        def get_selection(a):
            if self.history_list.curselection() != ():
                selection = str((self.history_list.get(self.history_list.curselection())))[3:] if True else None

                selected_folder.set(des_dir_path.get() + '/' + selection)
                update_history('') if not os.path.isdir(selected_folder.get()) else None
                self.view_comp.configure(state=DISABLED)
                self.view_bngl.configure(state=DISABLED)
                self.view_source.configure(state=DISABLED)

                try:
                    if os.listdir(selected_folder.get()):
                        self.delete_folder.configure(state=NORMAL)
                        for file in os.listdir(selected_folder.get()):
                            if file.endswith('.html'):
                                self.view_comp.configure(state=NORMAL)

                            elif file.endswith('.txt'):
                                self.view_bngl.configure(state=NORMAL)

                            elif file.endswith('.species'):
                                self.view_source.configure(state=NORMAL)
                except:
                    self.delete_folder.configure(state=DISABLED)
                    pass
            else:
                self.view_comp.configure(state=DISABLED)
                self.view_bngl.configure(state=DISABLED)
                self.view_source.configure(state=DISABLED)
                self.delete_folder.configure(state=DISABLED)

        def update_history(a):
            self.history_list.delete(0, END) if des_dir_path.get() != '' else None
            self.view_comp.configure(state=DISABLED)
            self.view_bngl.configure(state=DISABLED)
            self.view_source.configure(state=DISABLED)
            self.delete_folder.configure(state=DISABLED)
            sele_folder_dir = des_dir_path.get() if not None else None
            sele_folder = list(next(os.walk(sele_folder_dir))[:-1]) if os.path.isdir(sele_folder_dir) else None

            if sele_folder:
                messages.set('Destination directory selected ✔') if a else None
                write_d_loc(sele_folder_dir)

                c_time_dic_all = {}
                for dir in sele_folder[1]:
                    c_time_dic = {dir: os.stat(sele_folder[0] + '/' + dir).st_ctime}
                    c_time_dic_all.update(c_time_dic)

                sorted_all = dict(sorted(c_time_dic_all.items(), key=lambda kv: kv[1], reverse=True))

                for x in sorted_all:
                    if x != '':
                        self.history_list.insert(END, '✅  ' + str(x))

            elif not sele_folder:
                self.history_list.delete(0, END)

            if not os.path.isdir(des_dir_path.get()) and des_dir_path.get() != '' \
                    and des_dir_path.get().lower().startswith(tuple(get_drives())):
                messages.set('Destination directory does not exists, new directory will be created ✔')

            elif des_dir_path.get() != '' and not des_dir_path.get().lower().startswith(tuple(get_drives())):
                messages.set('Destination directory error ✘')

            run_button_update()

        def browse_des():
            # Allow user to select a directory and store it in global var
            # called folder_path

            save_dir = filedialog.askdirectory(initialdir=read_d_loc())

            if os.path.isdir(save_dir):
                des_dir_path.set(save_dir)
                write_d_loc(save_dir)

            elif not os.path.isdir(save_dir) and os.path.isdir(des_dir_path.get()):
                messages.set('New destination folder not selected, returned to previous ✔')

            elif not os.path.isdir(save_dir) and not os.path.isdir(des_dir_path.get()):
                messages.set('Destination folder not selected ✘, please try again!')

            update_history(save_dir)

        def s_entry_update(a):
            # on time update of program to check availability of the given file name
            # on time update of function buttons

            if os.path.isfile(source_file_path.get()):
                source_file_path.set(source_file_path.get())
                write_s_loc(source_file_path.get())
                messages.set('Source file selected ✔')

            elif not os.path.isfile(source_file_path.get()):
                messages.set('Source file does not exists ✘, please try again!')  # error

            run_button_update()

        def run_in_thread(fn):
            def run(*k, **kw):
                t = threading.Thread(target=fn, args=k, kwargs=kw)
                t.start()
                return t
            return run

        @run_in_thread
        def run_process():
            run = browse_and_parse_v02.open_file(source_file_path.get(), des_dir_path.get())
            if isinstance(run[0], bool):
                messages.set(run[2] + ' file --- ' + run[1] + ' --- processed successfully ✔')
                update_history('')
            elif isinstance(run[0], str):
                messages.set(run[0])
            else:
                return None

        def pop_view(a):
            if selected_folder.get() != '':
                for file in os.listdir(selected_folder.get()):
                    if file.endswith(a):
                        if a == '.html':
                            f_path = selected_folder.get() + '/' + file
                            chrome_path = read_browser_loc() + ' %s'
                            x = lambda: webbrowser.get(chrome_path).open_new(f_path)
                            t = threading.Thread(target=x)
                            t.start()

                        elif a == '.txt' or '.species':
                            f_path = selected_folder.get() + '/' + file
                            os.startfile(f_path)

        def delete_folder():
            folder = selected_folder.get()
            folder_name = folder.rsplit('/', 1)[1]

            if folder != '':
                if os.path.isdir(folder):
                    warning = messagebox.askyesno('Warning',
                                                  'Are you sure you want to permanently delete this folder?\n' + '\n' +
                                                  folder_name,
                                                  icon='warning')
                    if warning:
                        shutil.rmtree(folder)
                        messages.set(folder_name + ' --- deleted ✔')
                        update_history('')

                    else:
                        messages.set('No changes made!')

        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font10 = "-family {Segoe UI} -size 10 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        font11 = "-family {Segoe UI} -size 9 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        font12 = "-family {Segoe UI} -size 11 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        font13 = "-family {Segoe UI} -size 12 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        font9 = "-family {Segoe UI} -size 14 -weight bold -slant roman"  \
            " -underline 0 -overstrike 0"

        top.geometry("664x570+516+204")
        top.title("Virtual DNA Lab")
        top.configure(background="#dce1ea")
        top.configure(highlightbackground="#d8d8d8")
        top.configure(highlightcolor="black")
        top.resizable(False, False)

        self.source_directory_entry = tk.Entry(top, textvariable=source_file_path, font=("Segoe UI", 10))
        self.source_directory_entry.place(relx=0.045, rely=0.158, height=28
                , relwidth=0.789)
        self.source_directory_entry.bind("<KeyRelease>", s_entry_update)
        self.source_directory_entry.configure(background="white")
        self.source_directory_entry.configure(disabledforeground="#a3a3a3")
        self.source_directory_entry.configure(foreground="#000000")
        self.source_directory_entry.configure(highlightbackground="#d9d9d9")
        self.source_directory_entry.configure(highlightcolor="black")
        self.source_directory_entry.configure(insertbackground="black")
        self.source_directory_entry.configure(selectbackground="#c4c4c4")
        self.source_directory_entry.configure(selectforeground="black")

        self.browse_source_file = tk.Button(top, command=browse_source)
        self.browse_source_file.place(relx=0.858, rely=0.158, height=28
                , width=63)
        self.browse_source_file.configure(activebackground="#ececec")
        self.browse_source_file.configure(activeforeground="#000000")
        self.browse_source_file.configure(background="#d9d9d9")
        self.browse_source_file.configure(disabledforeground="#a3a3a3")
        self.browse_source_file.configure(font=font10)
        self.browse_source_file.configure(foreground="#000000")
        self.browse_source_file.configure(highlightbackground="#d9d9d9")
        self.browse_source_file.configure(highlightcolor="black")
        self.browse_source_file.configure(pady="0")
        self.browse_source_file.configure(text='''Browse''')

        self.source_label = tk.Label(top)
        self.source_label.place(relx=0.045, rely=0.105, height=28, width=77)
        self.source_label.configure(activebackground="#f9f9f9")
        self.source_label.configure(activeforeground="black")
        self.source_label.configure(background="#dce1ea")
        self.source_label.configure(disabledforeground="#a3a3a3")
        self.source_label.configure(font=font10)
        self.source_label.configure(foreground="#000000")
        self.source_label.configure(highlightbackground="#d9d9d9")
        self.source_label.configure(highlightcolor="black")
        self.source_label.configure(text='''Source file''')

        self.main_title = tk.Label(top)
        self.main_title.place(relx=0.286, rely=0.035, height=36, width=298)
        self.main_title.configure(activebackground="#f9f9f9")
        self.main_title.configure(activeforeground="black")
        self.main_title.configure(background="#dce1ea")
        self.main_title.configure(disabledforeground="#a3a3a3")
        self.main_title.configure(font=font9)
        self.main_title.configure(foreground="#000000")
        self.main_title.configure(highlightbackground="#d9d9d9")
        self.main_title.configure(highlightcolor="black")
        self.main_title.configure(text='''DNA Complexes Visualization''')

        self.notice_formats = tk.Label(top)
        self.notice_formats.place(relx=0.256, rely=0.211, height=23, width=237)
        self.notice_formats.configure(activebackground="#f9f9f9")
        self.notice_formats.configure(activeforeground="black")
        self.notice_formats.configure(background="#dce1ea")
        self.notice_formats.configure(disabledforeground="#a3a3a3")
        self.notice_formats.configure(font=font11)
        self.notice_formats.configure(foreground="#000000")
        self.notice_formats.configure(highlightbackground="#d9d9d9")
        self.notice_formats.configure(highlightcolor="black")
        self.notice_formats.configure(text='''Acceptable file formats ( .species, .0 )''')

        self.run_process = tk.Button(top, state=DISABLED, command= run_process)
        self.run_process.place(relx=0.809, rely=0.87, height=42, width=96)
        self.run_process.configure(activebackground="#ececec")
        self.run_process.configure(activeforeground="#000000")
        self.run_process.configure(background="#2fa857")
        self.run_process.configure(disabledforeground="#a3a3a3")
        self.run_process.configure(font=font13)
        self.run_process.configure(foreground="#ffffff")
        self.run_process.configure(highlightbackground="#d9d9d9")
        self.run_process.configure(highlightcolor="black")
        self.run_process.configure(pady="0")
        self.run_process.configure(text='''Run''')

        self.des_directory_entry = tk.Entry(top, textvariable=des_dir_path, font=("Segoe UI", 10))
        self.des_directory_entry.place(relx=0.045, rely=0.754, height=28
                , relwidth=0.789)
        self.des_directory_entry.bind("<KeyRelease>", update_history)
        self.des_directory_entry.configure(background="white")
        self.des_directory_entry.configure(disabledforeground="#a3a3a3")
        self.des_directory_entry.configure(foreground="#000000")
        self.des_directory_entry.configure(highlightbackground="#d9d9d9")
        self.des_directory_entry.configure(highlightcolor="black")
        self.des_directory_entry.configure(insertbackground="black")
        self.des_directory_entry.configure(selectbackground="#c4c4c4")
        self.des_directory_entry.configure(selectforeground="black")

        self.browse_des_dir = tk.Button(top, command=browse_des)
        self.browse_des_dir.place(relx=0.858, rely=0.754, height=28, width=63)
        self.browse_des_dir.configure(activebackground="#ececec")
        self.browse_des_dir.configure(activeforeground="#000000")
        self.browse_des_dir.configure(background="#d9d9d9")
        self.browse_des_dir.configure(disabledforeground="#a3a3a3")
        self.browse_des_dir.configure(font=font10)
        self.browse_des_dir.configure(foreground="#000000")
        self.browse_des_dir.configure(highlightbackground="#d9d9d9")
        self.browse_des_dir.configure(highlightcolor="black")
        self.browse_des_dir.configure(pady="0")
        self.browse_des_dir.configure(text='''Browse''')

        self.des_label = tk.Label(top)
        self.des_label.place(relx=0.045, rely=0.702, height=28, width=127)
        self.des_label.configure(activebackground="#f9f9f9")
        self.des_label.configure(activeforeground="black")
        self.des_label.configure(background="#dce1ea")
        self.des_label.configure(disabledforeground="#a3a3a3")
        self.des_label.configure(font=font10)
        self.des_label.configure(foreground="#000000")
        self.des_label.configure(highlightbackground="#d9d9d9")
        self.des_label.configure(highlightcolor="black")
        self.des_label.configure(text='''Destination folder''')

        self.message_general = tk.Label(top, textvariable=messages, anchor='w', font=("Segoe UI", 12, "bold"))
        self.message_general.place(relx=0.045, rely=0.298, relheight=0.061
                , relwidth=0.902)
        self.message_general.configure(background="#dce1ea")
        self.message_general.configure(foreground="blue")
        self.message_general.configure(highlightbackground="#d9d9d9")
        self.message_general.configure(highlightcolor="black")
        self.message_general.configure(text='''Message''')
        self.message_general.configure(width=599)

        self.view_comp = tk.Button(top, state=DISABLED, command=lambda: pop_view('.html'))
        self.view_comp.place(relx=0.761, rely=0.439, height=28, width=128)
        self.view_comp.configure(activebackground="#ececec")
        self.view_comp.configure(activeforeground="#000000")
        self.view_comp.configure(background="#b1d3a7")
        self.view_comp.configure(disabledforeground="#a3a3a3")
        self.view_comp.configure(font=font12)
        self.view_comp.configure(foreground="#000000")
        self.view_comp.configure(highlightbackground="#d9d9d9")
        self.view_comp.configure(highlightcolor="black")
        self.view_comp.configure(pady="0")
        self.view_comp.configure(text='''View complexes''')

        self.view_bngl = tk.Button(top, state=DISABLED, command=lambda: pop_view('.txt'))
        self.view_bngl.place(relx=0.761, rely=0.500, height=28, width=128)
        self.view_bngl.configure(activebackground="#ececec")
        self.view_bngl.configure(activeforeground="#000000")
        self.view_bngl.configure(background="#b1d3a7")
        self.view_bngl.configure(disabledforeground="#a3a3a3")
        self.view_bngl.configure(font=font12)
        self.view_bngl.configure(foreground="#000000")
        self.view_bngl.configure(highlightbackground="#d9d9d9")
        self.view_bngl.configure(highlightcolor="black")
        self.view_bngl.configure(pady="0")
        self.view_bngl.configure(text='''View BNGL''')

        self.view_source = tk.Button(top, state=DISABLED, command=lambda: pop_view('.species'))
        self.view_source.place(relx=0.761, rely=0.564, height=28, width=128)
        self.view_source.configure(activebackground="#ececec")
        self.view_source.configure(activeforeground="#000000")
        self.view_source.configure(background="#b1d3a7")
        self.view_source.configure(disabledforeground="#a3a3a3")
        self.view_source.configure(font=font12)
        self.view_source.configure(foreground="#000000")
        self.view_source.configure(highlightbackground="#d9d9d9")
        self.view_source.configure(highlightcolor="black")
        self.view_source.configure(pady="0")
        self.view_source.configure(text='''View source''')
        self.view_source.configure(width=128)

        self.history_label = tk.Label(top)
        self.history_label.place(relx=0.045, rely=0.383, height=27, width=56)
        self.history_label.configure(activebackground="#f9f9f9")
        self.history_label.configure(activeforeground="black")
        self.history_label.configure(background="#dce1ea")
        self.history_label.configure(disabledforeground="#a3a3a3")
        self.history_label.configure(font=font12)
        self.history_label.configure(foreground="#000000")
        self.history_label.configure(highlightbackground="#d9d9d9")
        self.history_label.configure(highlightcolor="black")
        self.history_label.configure(text='''History''')

        self.history_list = tk.Listbox(top, font=("Segoe UI", 11))
        self.history_list.bind('<<ListboxSelect>>', get_selection)
        self.history_list.place(relx=0.045, rely=0.439, relheight=0.239, relwidth = 0.684)
        self.history_list.configure(background="#e5eaf4")
        self.history_list.configure(disabledforeground="#a3a3a3")
        self.history_list.configure(foreground="#000000")
        self.history_list.configure(width=454)

        self.scrollbar = Scrollbar(self.history_list, orient="vertical")
        self.scrollbar.configure(command=self.history_list.yview)
        self.scrollbar.pack(side="right", fill="y")

        self.history_list.configure(yscrollcommand=self.scrollbar.set)

        self.delete_folder = tk.Button(top, state=DISABLED, command=delete_folder)
        self.delete_folder.place(relx=0.761, rely=0.628, height=28, width=128)
        self.delete_folder.configure(activebackground="#ececec")
        self.delete_folder.configure(activeforeground="#000000")
        self.delete_folder.configure(background="#ea9f9f")
        self.delete_folder.configure(disabledforeground="#a3a3a3")
        self.delete_folder.configure(font=font12)
        self.delete_folder.configure(foreground="#000000")
        self.delete_folder.configure(highlightbackground="#d9d9d9")
        self.delete_folder.configure(highlightcolor="black")
        self.delete_folder.configure(pady="0")
        self.delete_folder.configure(text='''Delete (selected)''')
        self.delete_folder.configure(width=128)

        def dis_or_ena(a):
            if a == 'dis':
                for child in top.winfo_children():
                    if not str(child) == '.!label5':
                        child.configure(state=DISABLED)

            elif a == 'ena':
                for child in top.winfo_children():
                    child.configure(state=NORMAL)
                    update_history('')
                    run_button_update()

        def look_browser():
            in_path = filedialog.askopenfilename()
            if os.path.isfile(in_path):
                if in_path.rsplit('/', 1)[1].lower() == 'chrome.exe':
                    write_browser_loc(in_path) if in_path is not None else None
                    top.deiconify()
                    dis_or_ena('ena')
                    messages.set('Chrome browser set ✔')
                else:
                    mess_pop = 'This is not the chrome browser ✘, please try again!'
                    pop_message_browser(mess_pop)
                    return None
            elif not os.path.isfile(in_path):
                mess_pop = 'Chrome browser not selected ✘, please try again!'
                pop_message_browser(mess_pop)
                return None

            else:
                return None

        def pop_message_browser(m):

            def exit_program():
                win.destroy()
                top.quit()
                os._exit(1)

            def look():
                win.destroy()
                look_browser()

            win = Tk()
            win.resizable(False, False)
            window_height = 250
            window_width = 750

            screen_width = win.winfo_screenwidth()
            screen_height = win.winfo_screenheight()

            x_cordinate = int((screen_width / 2) - (window_width / 2))
            y_cordinate = int((screen_height / 2) - (window_height / 2))

            win.geometry("{}x{}+{}+{}".format(window_width, window_height, x_cordinate, y_cordinate))
            win.title('Chrome browser error')
            message = "Program did not find Chrome browser ✘ \n \n" \
                      "- Click OK, if Chrome browser is not installed, please install and restart the program \n" \
                      "- Click Look, If Chrome browser is already installed, " \
                      "please browse to " + '"chrome.exe"' + " at installation directory"

            Label(win, text=message, font=("Segoe UI", 10), justify=LEFT, pady=20).pack()
            Label(win, text=m, font=("Times New Roman", 12, "bold"), foreground="red").pack()
            Button(win, text='OK', command=exit_program, pady=3, padx=20, font="bold").pack(side=LEFT,
                                                                                            pady=20,
                                                                                            padx=120)
            Button(win, text='Look', command=look, pady=3, padx=20, font="bold").pack(side=RIGHT,
                                                                                      pady=20,
                                                                                      padx=120)
            win.protocol("WM_DELETE_WINDOW", exit_program)
            try:
                top.withdraw()
                win.mainloop()
            except RuntimeError:
                return None

        def set_browser():
            dis_or_ena('dis')
            c_loc = read_browser_loc()
            check = os.path.isfile(c_loc)

            def try_search():
                loc = get_bowser_location()
                if loc:
                    write_browser_loc(loc)
                    dis_or_ena('ena')
                    messages.set('Program is ready ✔')
                else:
                    pop_message_browser('')

            if check:
                chrome = c_loc.rsplit('/', 1)[1].lower()
                if chrome == 'chrome.exe':
                    dis_or_ena('ena')
                    messages.set('Program is ready ✔')
                elif chrome != 'chrome.exe':
                    messages.set('Chrome browser not found, searching for Chrome browser...')
                    try_search()

            if not check:
                messages.set('Chrome browser not found, searching for Chrome browser...')
                try_search()

        x = lambda: set_browser()
        loc = threading.Thread(target=x)
        loc.start()


if __name__ == '__main__':
    vp_start_gui()
